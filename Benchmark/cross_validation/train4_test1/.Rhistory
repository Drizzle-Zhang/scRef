df.fisher <- data.frame(sig = vec.sig,
pathway = df.db.KEGG[,pathway])
table.fisher <- xtabs(~ sig + pathway, data = df.fisher)
out.fisher <- fisher.test(table.fisher)
df.enrich <- rbind(df.enrich,
data.frame(pathway = pathway,
pvalue = out.fisher$p.value))
}
df.enrich$qvalue <- p.adjust(df.enrich$pvalue)
# write enrichment results
file.treat <- paste0(path.plot, "/Enrich_", level, "_treatment_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(df.enrich, file = file.treat, quote = F, sep = '\t')
df.enrich.sig <- df.enrich[df.enrich$pvalue < p.cutoff,]
if (dim(df.enrich.sig)[1] > 1) {
df.enrich.sig$lgp <- -log10(df.enrich.sig$pvalue)
plot.enrich <-
ggplot(data = df.enrich.sig, aes(x = pathway, y = lgp)) +
geom_bar(stat = 'identity') +
labs(y = '-log(Pvalue)', x = 'Pathway', title = 'Enriched in treat') +
coord_flip()
ggsave(filename = paste0("/pathway_", level, "_treat_enrich_", sub.time,
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.enrich)
}
}
# GSEA
# filter results
res.edgeR.L <- res.edgeR
res.edgeR.L$KO_id <- row.names(res.edgeR.L)
df.counts.mean <- data.frame(KO_id = row.names(sub.KEGG),
mean_counts = rowMeans(sub.KEGG))
res.edgeR.L <- merge(res.edgeR.L, df.counts.mean, by = 'KO_id')
row.names(res.edgeR.L) <- res.edgeR.L$KO_id
# res.edgeR.L$pvalue <- res.edgeR.L$PValue
# res.edgeR.L$pvalue[res.edgeR.L$mean_counts < 5] <- 1
res.edgeR.L <- res.edgeR.L[res.edgeR.L$mean_counts > 10,]
# res.edgeR.L$qvalue <- p.adjust(res.edgeR.L$PValue, method = 'fdr')
res.edgeR.L$logPval <- log10(res.edgeR.L$PValue) *
(res.edgeR.L$logFC / abs(res.edgeR.L$logFC))
geneList <- res.edgeR.L$logPval
names(geneList) <- row.names(res.edgeR.L)
geneList[is.na(geneList)] <- 0
geneList <- geneList[order(geneList, decreasing = T)]
egmt <- GSEA(geneList, TERM2GENE = df.gene.set, pvalueCutoff = 0.9)
res.egmt <- egmt@result
# vec.KO <- strsplit(
#     res.egmt['Photosynthesis - antenna proteins', 'core_enrichment'], '/')[[1]]
# res.edgeR.L[vec.KO,]
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
write.table(res.egmt, file = file.GSEA, quote = F, sep = '\t', row.names = F)
}
}
# time series
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
if (!file.exists(path.plot)) {
dir.create(path.plot)
}
series.time <- unique(df.meta$Time)
files.res <- foreach(sub.time = series.time, .combine = rbind) %dopar%
find.sig.KO(df.meta.gender, df.db.KEGG.L2, df.db.KEGG.L3,
df.gene.set.L2, df.gene.set.L3,
path.plot, vec.dose, type.cutoff, sub.time)
View(df.KEGG)
library(ggplot2)
library(muted)
# meta file
meta.file <- '/home/drizzle_zhang/microbiome/result/meta_sample.out.txt'
df.meta <- read.delim(meta.file, stringsAsFactors = FALSE)
# KEGG
file.KEGG.L3 <- '/home/drizzle_zhang/microbiome/result/9.PICRUSt/origin_data/KO_KEGG_L3.txt'
df.db.KEGG <- read.delim(file.KEGG.L3, row.names = 1, header = F,
stringsAsFactors = F)
names.KEGG.L3 <- as.character(df.db.KEGG[1,])
names(df.db.KEGG) <- names.KEGG.L3
df.db.KEGG <- df.db.KEGG[-1,]
# cutoff
type.cutoff <- 'fdr'
# dose
# vec.dose <- c(0, 1, 2, 3)
vec.dose <- c(0, 3)
# time series
series.time <- unique(df.meta$Time)
############################# GSEA
level <- 'L3'
# male
gender <- 'male'
df.meta.gender <- df.meta[df.meta$Gender == gender, ]
path.plot <- paste0('/home/drizzle_zhang/microbiome/result/9.PICRUSt/heatmap_',
gender, '_', type.cutoff)
df.GSEA <- data.frame(ID = names.KEGG.L3)
for (sub.time in series.time) {
file.GSEA <- paste0(path.plot, "/GSEA_", level, "_", sub.time,
paste0(as.character(vec.dose), collapse = ''),
".txt")
sub.GSEA <- read.delim(file.GSEA, row.names = 1)
sub.GSEA$logPval <- log10(sub.GSEA$pvalue) *
(sub.GSEA$enrichmentScore / abs(sub.GSEA$enrichmentScore))
sub.GSEA <- sub.GSEA[, c("Description", "logPval")]
names(sub.GSEA) <- c("ID", sub.time)
df.GSEA <- merge(df.GSEA, sub.GSEA, by = 'ID', all = T)
}
row.names(df.GSEA) <- df.GSEA$ID
df.GSEA$ID <- NULL
df.GSEA[is.na(df.GSEA)] <- 0
# sort
df.sort <- data.frame(stringsAsFactors = F)
for (row in row.names(df.GSEA)) {
for (col in 1:length(names(df.GSEA))) {
if (!col %in% c(1, 13)) {
df.sort <- rbind(df.sort, data.frame(pathway = row, time = col,
value = df.GSEA[row, col],
stringsAsFactors = F))
}
}
}
df.sort$ID <- paste(df.sort$pathway, df.sort$time, sep = '_')
df.sort <- df.sort[order(df.sort$value),]
sort.value <- df.sort$value
df.ks <- data.frame(stringsAsFactors = F)
for (pathway in names.KEGG.L3) {
sub.sort <- df.sort[df.sort$pathway == pathway, 'value']
enrich.control <- ks.test(sub.sort, sort.value, alternative = 'less')
enrich.treat <- ks.test(sub.sort, sort.value, alternative = 'greater')
df.ks <- rbind(df.ks, data.frame(pathway = pathway,
pvalue.control = enrich.control$p.value,
pvalue.treat = enrich.treat$p.value))
}
df.ks$qvalue.control <- p.adjust(df.ks$pvalue.control, method = 'fdr')
df.ks$qvalue.treat <- p.adjust(df.ks$pvalue.treat, method = 'fdr')
# use ks score to plot
df.ks.male <- df.ks
df.ks.male.filter <- df.ks.male[
df.ks.male$qvalue.control < 0.1 | df.ks.male$qvalue.treat < 0.1,]
log10Pval <- c()
for (i in row.names(df.ks.male.filter)) {
pvalue.control <- -log10(df.ks.male.filter[i, 'pvalue.control'])
pvalue.treat <- -log10(df.ks.male.filter[i, 'pvalue.treat'])
if (pvalue.control > pvalue.treat) {
log10Pval <- c(log10Pval, pvalue.control)
} else {
log10Pval <- c(log10Pval, -pvalue.treat)
}
}
df.ks.male.filter$log10Pval <- log10Pval
df.ks.male.filter <- df.ks.male.filter[
order(df.ks.male.filter$log10Pval, decreasing = T), ]
vec.color <- c()
for (pval in df.ks.male.filter$log10Pval) {
if (pval > 0) {
vec.color <- c(vec.color, 'Enrich in Control')
} else {
vec.color <- c(vec.color, 'Enrich in Treatment')
}
}
df.ks.male.filter$color <- vec.color
plot.male <-
ggplot(data = df.ks.male.filter, aes(x = reorder(pathway, X = log10Pval),
y = log10Pval, fill = color)) +
geom_bar(stat = 'identity') +
labs(x = 'Pathway', y = '-log10(Pvalue)', fill = '') +
coord_flip() +
theme(panel.background = element_rect(color = 'gray', size = 1.5,
fill = 'transparent'),
panel.grid.major.y = element_line(colour = "gray", size = 0.1,
linetype = 2),
axis.text.x = element_text(size = 9))
ggsave(filename = paste0("/Combine_Sum_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.male,
height = 12, width = 24, units = 'cm')
# heatmap
df.GSEA.male <- df.GSEA[as.character(df.ks.male.filter$pathway),]
df.heatmap.male <- data.frame(stringsAsFactors = F)
for (pathway in row.names(df.GSEA.male)) {
for (sub.time in names(df.GSEA.male)) {
df.heatmap.male <-
rbind(df.heatmap.male,
data.frame(pathway = pathway, time = sub.time,
score = df.GSEA.male[pathway, sub.time],
stringsAsFactors = F))
}
}
df.heatmap.male$pathway <-
factor(df.heatmap.male$pathway,
levels = as.character(df.ks.male.filter$pathway), ordered = T)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
library(scales)
plot.heatmap.male <-
ggplot(data = df.heatmap.male,
aes(x = time, y = pathway, fill = score)) +
geom_tile() +
scale_fill_gradient2(low = muted("blue"), high = muted("red")) +
labs(x = 'Time', y = 'Pathway', fill = 'Enrichment Score') +
theme(panel.background = element_rect(color = 'white', size = 1.5,
fill = 'transparent'),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 12))
ggsave(filename = paste0("/Combine_Heatmap_GSEA_",
paste0(as.character(vec.dose), collapse = ''), ".png"),
path = path.plot, plot = plot.heatmap.male,
height = 12, width = 20, units = 'cm')
file.MCA <- '/home/drizzle_zhang/scRef/try_data/MCA_combined_mouse_uniform.txt'
df.MCA <- read.table(file.MCA, header=T, row.names=1, sep='\t', check.name=F)
=
=
errorCondition('123')
fpm.MCA <- fpm(obj.DESeq.MCA, robust = T)
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train4_test1')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train4_test1/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
DataPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat.txt')
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
CV_RDataPath <- paste0(path.output, 'CV_folds.RData')
# scID
run_scmap(DataPath,LabelsPath,CV_RDataPath,OutputDir)
Data <- read.csv(DataPath,row.names = 1)
Labels <- as.matrix(read.csv(LabelsPath))
load(CV_RDataPath)
Labels <- as.vector(Labels[,col_Index])
Data <- Data[Cells_to_Keep,]
Labels <- Labels[Cells_to_Keep]
GeneOrderPath = NULL
NumGenes = NULL
library(scmap)
library(SingleCellExperiment)
True_Labels_scmapcluster <- list()
Pred_Labels_scmapcluster <- list()
True_Labels_scmapcell <- list()
Pred_Labels_scmapcell <- list()
Training_Time_scmapcluster <- list()
Testing_Time_scmapcluster <- list()
Training_Time_scmapcell <- list()
Testing_Time_scmapcell <- list()
Data = t(as.matrix(Data))
for (i in c(1:n_folds)){
if(!is.null(GeneOrderPath) & !is.null (NumGenes)){
sce <- SingleCellExperiment(list(normcounts = Data[as.vector(GenesOrder[c(1:NumGenes),i])+1,Train_Idx[[i]]]),
colData = data.frame(cell_type1 = Labels[Train_Idx[[i]]]))
logcounts(sce) <- log2(normcounts(sce) + 1)
# use gene names as feature symbols
rowData(sce)$feature_symbol <- rownames(sce)
sce <- selectFeatures(sce, n_features = NumGenes, suppress_plot = TRUE)
sce_test <- SingleCellExperiment(list(normcounts = Data[as.vector(GenesOrder[c(1:NumGenes),i])+1,Test_Idx[[i]]]),
colData = data.frame(cell_type1 = Labels[Test_Idx[[i]]]))
logcounts(sce_test) <- log2(normcounts(sce_test) + 1)
rowData(sce_test)$feature_symbol <- rownames(sce_test)
sce_test@rowRanges@elementMetadata@listData = sce@rowRanges@elementMetadata@listData
}
else{
sce <- SingleCellExperiment(list(normcounts = Data[,Train_Idx[[i]]]),
colData = data.frame(cell_type1 = Labels[Train_Idx[[i]]]))
logcounts(sce) <- log2(normcounts(sce) + 1)
# use gene names as feature symbols
rowData(sce)$feature_symbol <- rownames(sce)
sce <- selectFeatures(sce, suppress_plot = TRUE)
sce_test <- SingleCellExperiment(list(normcounts = Data[,Test_Idx[[i]]]),
colData = data.frame(cell_type1 = Labels[Test_Idx[[i]]]))
logcounts(sce_test) <- log2(normcounts(sce_test) + 1)
rowData(sce_test)$feature_symbol <- rownames(sce_test)
sce_test@rowRanges@elementMetadata@listData = sce@rowRanges@elementMetadata@listData
}
# scmap-cluster
start_time <- Sys.time()
sce <- indexCluster(sce)
end_time <- Sys.time()
Training_Time_scmapcluster[i] <- as.numeric(difftime(end_time,start_time,units = 'secs'))
start_time <- Sys.time()
scmapCluster_results <- scmapCluster(projection = sce_test,index_list = list(metadata(sce)$scmap_cluster_index))
end_time <- Sys.time()
Testing_Time_scmapcluster[i] <- as.numeric(difftime(end_time,start_time,units = 'secs'))
True_Labels_scmapcluster[i] <- list(Labels[Test_Idx[[i]]])
Pred_Labels_scmapcluster[i] <- list(scmapCluster_results$combined_labs)
}
source('./method_functions.R')
# scID
run_scmap(DataPath,LabelsPath,CV_RDataPath,OutputDir)
# CHETAH
run_CHETAH(DataPath,LabelsPath,CV_RDataPath,OutputDir)
Data <- read.delim(DataPath,row.names = 1)
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1))
load(CV_RDataPath)
Labels <- as.vector(Labels[,col_Index])
Data <- Data[Cells_to_Keep,]
Labels <- Labels[Cells_to_Keep]
library(CHETAH)
library(SingleCellExperiment)
True_Labels_CHETAH <- list()
Pred_Labels_CHETAH <- list()
Total_Time_CHETAH <- list()
Data = t(as.matrix(Data))
i=1
sce <- SingleCellExperiment(assays = list(counts = Data[,Train_Idx[[i]]]),
colData = data.frame(celltypes = Labels[Train_Idx[[i]]]))
sce_test <- SingleCellExperiment(assays = list(counts = Data[,Test_Idx[[i]]]),
colData = data.frame(celltypes = Labels[Test_Idx[[i]]]))
sce_test <- CHETAHclassifier(input = sce_test, ref_cells = sce)
# CHETAH
run_CHETAH(DataPath,LabelsPath,CV_RDataPath,OutputDir)
source('./method_functions.R')
gc()
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train4_test1')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train4_test1/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
DataPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat.txt')
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
CV_RDataPath <- paste0(path.output, 'CV_folds.RData')
# CHETAH
run_CHETAH(DataPath,LabelsPath,CV_RDataPath,OutputDir)
# scPred
scPred(DataPath,LabelsPath,CV_RDataPath,OutputDir)
# scPred
run_scPred(DataPath,LabelsPath,CV_RDataPath,OutputDir)
library(sciBet)
library(scibet)
source('./method_functions.R')
setwd('/home/drizzle_zhang/my_git/scRef/Benchmark/cross_validation/train4_test1')
source('./Cross_Validation.R')
source('./method_functions.R')
source('./evaluate.R')
path.input <- '/home/drizzle_zhang/scRef/'
path.output <- '/home/drizzle_zhang/scRef/cross_validation/train4_test1/'
# generate cross validation dataset
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
OutputDir <- path.output
# Cross_Validation(LabelsPath, OutputDir)
DataPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat.txt')
LabelsPath <- paste0(path.input, 'summary/Zeisel_exp_sc_mat_cluster_original.txt')
CV_RDataPath <- paste0(path.output, 'CV_folds.RData')
# scPred
run_sciBet(DataPath,LabelsPath,CV_RDataPath,OutputDir)
run_sciBet<-function(DataPath,LabelsPath,CV_RDataPath,OutputDir,GeneOrderPath = NULL,NumGenes = NULL){
"
run sciBet
Wrapper script to run sciBet on a benchmark dataset with 5-fold cross validation,
outputs lists of true and predicted cell labels as csv files, as well as computation time.
Parameters
----------
DataPath : Data file path (.tsv), cells-genes matrix with cell unique barcodes
as row names and gene names as column names.
LabelsPath : Cell population annotations file path (.tsv).
CV_RDataPath : Cross validation RData file path (.RData), obtained from Cross_Validation.R function.
OutputDir : Output directory defining the path of the exported file.
GeneOrderPath : Gene order file path (.csv) obtained from feature selection,
defining the genes order for each cross validation fold, default is NULL.
NumGenes : Number of genes used in case of feature selection (integer), default is NULL.
"
Data <- read.delim(DataPath,row.names = 1)
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1))
load(CV_RDataPath)
Labels <- as.vector(Labels[,col_Index])
Data <- Data[Cells_to_Keep,]
Labels <- Labels[Cells_to_Keep]
if(!is.null(GeneOrderPath) & !is.null(NumGenes)){
GenesOrder = read.csv(GeneOrderPath)
}
#############################################################################
#                               sciBet                                     #
#############################################################################
suppressMessages(library(tidyverse))
suppressMessages(library(scibet))
suppressMessages(library(viridis))
suppressMessages(library(ggsci))
True_Labels_sciBet <- list()
Pred_Labels_sciBet <- list()
Total_Time_sciBet <- list()
Data = t(as.matrix(Data))
for (i in c(1:n_folds)){
train_set <- t(rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]]))
if(!is.null(GeneOrderPath) & !is.null (NumGenes)){
start_time <- Sys.time()
# sciBet = sciBet(method = "single", Data[as.vector(GenesOrder[c(1:NumGenes),i])+1,Test_Idx[[i]]],
#                   Data[as.vector(GenesOrder[c(1:NumGenes),i])+1,Train_Idx[[i]]],
#                   Labels[Train_Idx[[i]]], numCores = 1)
end_time <- Sys.time()
}
else{
start_time <- Sys.time()
sciBet = SciBet(train_set, t(Data[,Test_Idx[[i]]]))
end_time <- Sys.time()
}
Total_Time_sciBet[i] <- as.numeric(difftime(end_time,start_time,units = 'secs'))
True_Labels_sciBet[i] <- list(Labels[Test_Idx[[i]]])
Pred_Labels_sciBet[i] <- list(as.vector(sciBet$labels))
}
True_Labels_sciBet <- as.vector(unlist(True_Labels_sciBet))
Pred_Labels_sciBet <- as.vector(unlist(Pred_Labels_sciBet))
Total_Time_sciBet <- as.vector(unlist(Total_Time_sciBet))
setwd(OutputDir)
if(!is.null(GeneOrderPath) & !is.null(NumGenes)){
write.csv(True_Labels_sciBet,paste('sciBet_',NumGenes,'_True_Labels.csv', sep = ''),row.names = FALSE)
write.csv(Pred_Labels_sciBet,paste('sciBet_',NumGenes,'_Pred_Labels.csv', sep = ''),row.names = FALSE)
write.csv(Total_Time_sciBet,paste('sciBet_',NumGenes,'_Total_Time.csv', sep = ''),row.names = FALSE)
}
else{
write.csv(True_Labels_sciBet,'sciBet_True_Labels.csv',row.names = FALSE)
write.csv(Pred_Labels_sciBet,'sciBet_Pred_Labels.csv',row.names = FALSE)
write.csv(Total_Time_sciBet,'sciBet_Total_Time.csv',row.names = FALSE)
}
}
# scPred
run_sciBet(DataPath,LabelsPath,CV_RDataPath,OutputDir)
Data <- read.delim(DataPath,row.names = 1)
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1))
load(CV_RDataPath)
Labels <- as.vector(Labels[,col_Index])
Data <- Data[Cells_to_Keep,]
Labels <- Labels[Cells_to_Keep]
suppressMessages(library(tidyverse))
suppressMessages(library(scibet))
suppressMessages(library(viridis))
suppressMessages(library(ggsci))
True_Labels_sciBet <- list()
Pred_Labels_sciBet <- list()
Total_Time_sciBet <- list()
Data = t(as.matrix(Data))
View(Data)
i=1
train_set <- cbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]])
View(train_set)
sciBet = SciBet(train_set, Data[,Test_Idx[[i]]])
a=Data[,Test_Idx[[i]]]
View(a)
Data <- read.delim(DataPath,row.names = 1)
Labels <- as.matrix(read.delim(LabelsPath, row.names = 1))
load(CV_RDataPath)
Labels <- as.vector(Labels[,col_Index])
Data <- Data[Cells_to_Keep,]
Labels <- Labels[Cells_to_Keep]
if(!is.null(GeneOrderPath) & !is.null(NumGenes)){
GenesOrder = read.csv(GeneOrderPath)
}
#############################################################################
#                               sciBet                                     #
#############################################################################
suppressMessages(library(tidyverse))
suppressMessages(library(scibet))
suppressMessages(library(viridis))
suppressMessages(library(ggsci))
True_Labels_sciBet <- list()
Pred_Labels_sciBet <- list()
Total_Time_sciBet <- list()
train_set <- cbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]])
train_set <- rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]])
sciBet = SciBet(t(train_set), t(Data[,Test_Idx[[i]]]))
a <- t(Data[,Test_Idx[[i]]])
View(a)
train_set <- as.matrix(rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]]))
sciBet = SciBet(t(train_set), t(Data[,Test_Idx[[i]]]))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyverse))
suppressMessages(library(scibet))
suppressMessages(library(viridis))
suppressMessages(library(ggsci))
path_da <- "/home/drizzle_zhang/scRef/summary/scibet/test.rds.gz"
expr <- readr::read_rds(path = path_da)
path_da <- "/home/drizzle_zhang/scRef/summary/scibet/test.rds.gz"
expr <- readr::read_rds(path = path_da)
suppressMessages(library(ggplot2))
tibble(
ID = 1:nrow(expr),
label = expr$label
) %>%
dplyr::sample_frac(0.7) %>%
dplyr::pull(ID) -> ID
train_set <- expr[ID,]      #construct reference set
test_set <- expr[-ID,]      #construct query set
prd <- SciBet(train_set, test_set[,-ncol(test_set)])
train_set <- as.matrix(rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]]))
sciBet = SciBet(t(train_set), as.data.frame(t(Data[,Test_Idx[[i]]])))
View(test_set)
View(train_set)
train_set <- t(rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]]))
dimnames(train_set)[[2]][dim(train_set)[2]]
View(train_set)
dimnames(train_set)[[2]][dim(train_set)[2]] <- 'label'
sciBet = SciBet(t(train_set), as.data.frame(t(Data[,Test_Idx[[i]]])))
View(test_set)
# Data = t(as.matrix(Data))
row.names(Data) <- 1:nrow(Data)
train_set <- t(rbind(Data[,Train_Idx[[i]]], Labels[Train_Idx[[i]]]))
